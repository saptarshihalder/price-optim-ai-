# Copy this file to backend/.env and fill values.

# Option A: service account JSON file path (recommended on local dev)
# Use absolute path or relative to backend/ directory. On Windows, either C:/path/file.json or escape backslashes.
# GOOGLE_SERVICE_ACCOUNT_FILE=C:/path/to/service-account.json

# Option B: inline JSON (be careful with quotes) â€“ or base64 to avoid quoting issues
# GOOGLE_SERVICE_ACCOUNT_JSON={"type":"service_account", ...}
# GOOGLE_SERVICE_ACCOUNT_JSON_BASE64=base64-encoded-json-here

# Option C: email + private key pair (ensure \n newlines are escaped like \\n)
# GOOGLE_SERVICE_ACCOUNT_EMAIL=your-sa@project.iam.gserviceaccount.com
# GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY=-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n
# Target spreadsheet (choose one)
# Prefer ID or URL; Name lookup requires the sheet to be visible to the service account.
# GOOGLE_SHEET_ID=your_spreadsheet_id_here
# GOOGLE_SHEET_URL=https://docs.google.com/spreadsheets/d/your_spreadsheet_id_here/edit#gid=0
# GOOGLE_SHEET_NAME=Your Spreadsheet Name

# --- Airtable (host scraped data in Airtable) ---
# Force Airtable backend, or rely on auto-detect when AIRTABLE_* is present
# STORAGE_BACKEND=airtable
# AIRTABLE_API_KEY=pat_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# AIRTABLE_BASE_ID=appXXXXXXXXXXXXXX
# Optional: customize table names (defaults shown)
# AIRTABLE_TABLE_RUNS=scraping_runs
# AIRTABLE_TABLE_PRODUCTS_RUN=scraped_products_run
# AIRTABLE_TABLE_PRODUCTS=scraped_products
